---
layout: post
title: Singleton classes or Eigenclasses
---

h1. {{ page.title }}

p(meta). 28 Jan 2009 - Miami, FL

Vegas for the week at a conference. In the Java world, 'Singleton' (at least to me) usually referred to the design pattern which allowed you to ensure that there would always only be a maximum of one object instance of a particular class. It was usually implemented by making the constructor private and providing an access method that returned a single (usually static) instance of an singular object. It might looked something like this:

<script src='http://pastie.org/373956.js'></script>
	 
Things appear to be slightly different in the Ruby world. A <i>singleton</i> or <i>eigenclass</i> in the Ruby world refers to a particular instance of an object, and ruby allows us to override the methods and behaviors of a particular object (note - not class).

<pre>
	?> class A
	>> end
	=> nil
	>> 
	?> a = A.new
	=> #<A:0x5ef664>
	>> b = A.new
	=> #<A:0x5ee1d8>
	>> 
	?> class << a
	>> def to_s; "Instance method"; end
	>> end
	=> nil
	>> 
	?> a
	=> Instance method
	>> b
	=> #<A:0x5ee1d8>
</pre>

For more checkout: "whytheluckystiff":http://whytheluckystiff.net/articles/seeingMetaclassesClearly.html.