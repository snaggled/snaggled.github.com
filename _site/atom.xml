<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Philip Mcmahon</title>
 <link href="http://snaggled.github.com/atom.xml" rel="self"/>
 <link href="http://snaggled.github.com/"/>
 <updated>2010-02-18T21:57:38-07:00</updated>
 <id>http://snaggled.github.com/</id>
 <author>
   <name>Philip Mcmahon</name>
   <email>philip@packetnode.com</email>
 </author>

 
 <entry>
   <title>New Layout & Style</title>
   <link href="/2010/02/18/new-layout-and-style.html"/>
   <updated>2010-02-18T00:00:00-07:00</updated>
   <id>/2010/02/18/new-layout-and-style</id>
   <content type="html">&lt;h2&gt;&lt;a href=&quot;/2010/02/18/new-layout-and-style.html&quot;&gt;New Layout &amp;amp; Style&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;18 Feb 2010 &amp;#8211; Denver, CO&lt;/p&gt;
&lt;div id=&quot;post-1&quot; class=&quot;post&quot;&gt;
&lt;div class=&quot;entry&quot;&gt;
&lt;p&gt;First post of the new year, and a shiny new look to boot. Been spending my early morning (thank you Dunkin Donuts coffee) reading this:&lt;br /&gt;
&lt;br/&gt;&lt;img src=&quot;http://www.informit.com/ShowCover.aspx?isbn=0321566157&quot;/&gt;&lt;br /&gt;
&lt;br/&gt;First reviews and notes to hopefully start this weekend.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Blocks & Procs in Ruby</title>
   <link href="/2009/05/14/blocks-and-procs-in-ruby.html"/>
   <updated>2009-05-14T00:00:00-06:00</updated>
   <id>/2009/05/14/blocks-and-procs-in-ruby</id>
   <content type="html">&lt;h2&gt;&lt;a href=&quot;/2009/05/14/blocks-and-procs-in-ruby.html&quot;&gt;Blocks &amp;amp; Procs in Ruby&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;14 May 2009 &amp;#8211; Denver, CO&lt;/p&gt;
&lt;div id=&quot;post-1&quot; class=&quot;post&quot;&gt;
&lt;div class=&quot;entry&quot;&gt;
&lt;p&gt;So, in addition to a minor re-org (took the last post of the front page and decided to just show a list of posts), I continued reading &lt;a href=&quot;http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Method_Calls&quot;&gt;this&lt;/a&gt; awesome article. Here&amp;#8217;s the distilled version.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Procs&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A Proc, at its simplest, is a block of code that has been bound to a local variable, also known in various forms (some of these more accurate than other) as &amp;#8220;function objects&amp;#8221;, &amp;#8220;functors&amp;#8221; and &amp;#8220;closures&amp;#8221;. They act like any other &amp;#8220;first-class&amp;#8221; objects, can be passed around, stored in data-structures.&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
&amp;gt;&amp;gt; def foo(a, b)
&amp;gt;&amp;gt; a.call(b)
&amp;gt;&amp;gt; end
=&amp;gt; nil
&amp;gt;&amp;gt;  a = Proc.new {|param| puts &quot;'a' being executed on param #{param}&quot;}
=&amp;gt; #&amp;lt;Proc:0x00587a14@(irb):4&amp;gt;
&amp;gt;&amp;gt; b = &quot;hello&quot;
=&amp;gt; &quot;hello&quot;
&amp;gt;&amp;gt; foo(a, b)
'a' being executed on param hello
=&amp;gt; nil
&lt;/pre&gt;
&lt;p&gt;In the above example, we&amp;#8217;ve created a proc &amp;#8220;a&amp;#8221; which accepts params &amp;#8220;param&amp;#8221;. When we pass both to foo, it simply calls &amp;#8220;a&amp;#8221; and passes &amp;#8220;b&amp;#8221; in.&lt;/p&gt;
&lt;p&gt;We have a choice when creating procs &amp;#8211; between &amp;#8220;Proc.new&amp;#8221; and &amp;#8220;lamdba&amp;#8221;.&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
?&amp;gt; x = lambda {|y| puts y}
=&amp;gt; #&amp;lt;Proc:0x0057a24c@(irb):16&amp;gt;
&amp;gt;&amp;gt; x.call(&quot;hello&quot;)
hello
=&amp;gt; nil
&lt;/pre&gt;
&lt;p&gt;In short, they differ slightly in how the return from methods (Proc.new created Procs will return immediately, lambda will not) and the fact that lambda does parameter checking and Proc.new does not.&lt;/p&gt;
&lt;h3&gt;Methods&lt;/h3&gt;
&lt;p&gt;Methods are blocks of code, bound to an object, that have access to its instance variables. The interesting thing about a method here is that you can define &amp;#8216;top-level&amp;#8217; methods, which is implicitly bound to the &lt;a href=&quot;http://www.ruby-doc.org/core/classes/Object.html&quot;&gt;Object&lt;/a&gt; class.&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
&amp;gt;&amp;gt; def s; puts &quot;s&quot;; end
=&amp;gt; nil
&amp;gt;&amp;gt; p Object.methods
[&quot;inspect&quot;, &quot;private_class_method&quot;, &quot;const_missing&quot;, &quot;clone&quot;, 
&quot;method&quot;, &quot;public_methods&quot;, &quot;public_instance_methods&quot;, ...
=&amp;gt; nil
&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;And we can also dynamically call the method using &lt;a href=&quot;http://www.ruby-doc.org/core/classes/Object.html#M000334&quot;&gt;send&lt;/a&gt; (we can pass either a String or the Symbol for the method name).&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
?&amp;gt; o = Object.new
=&amp;gt; #&amp;lt;Object:0x5e9cf0&amp;gt;
&amp;gt;&amp;gt; o.send(:s)
s
=&amp;gt; nil
&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;h3&gt;Blocks&lt;/h3&gt;
&lt;p&gt;A Block is a (lets called it &amp;#8216;uninstantiated&amp;#8217;) proc. Its the block of code for example in the braces after the lambda command.&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
&amp;gt;&amp;gt; x = lambda {&quot;puts i am a proc&quot;}
=&amp;gt; #&amp;lt;Proc:0x005f0924@(irb):1&amp;gt;
&amp;gt;&amp;gt; def f(func)
&amp;gt;&amp;gt; func.call
&amp;gt;&amp;gt; end
=&amp;gt; nil
&amp;gt;&amp;gt; f(x)
=&amp;gt; &quot;puts i am a proc&quot;
?&amp;gt; def g
&amp;gt;&amp;gt; yield
&amp;gt;&amp;gt; end
=&amp;gt; nil
&amp;gt;&amp;gt; g {&quot;i am a block, implicitly turned into a proc when passed to method&quot;}
=&amp;gt; &quot;i am a block, implicitly turned into a proc when passed to method&quot;
&lt;/pre&gt;
&lt;p&gt;On a final note, I&amp;#8217;ve been using &lt;a href=&quot;http://www.ruby-doc.org/docbar/&quot;&gt;this sidebar&lt;/a&gt; which is truly awesome.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Method Params in Ruby</title>
   <link href="/2009/04/29/method-params-in-ruby.html"/>
   <updated>2009-04-29T00:00:00-06:00</updated>
   <id>/2009/04/29/method-params-in-ruby</id>
   <content type="html">&lt;h2&gt;&lt;a href=&quot;/2009/04/29/method-params-in-ruby.html&quot;&gt;Method Params in Ruby&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;29 Apr 2009 &amp;#8211; Denver, CO&lt;/p&gt;
&lt;div id=&quot;post-1&quot; class=&quot;post&quot;&gt;
&lt;div class=&quot;entry&quot;&gt;
&lt;p&gt;Couple of things: firstly, I was a little fed-up trying to keep the format of code when I pasted it into this blog, and &lt;a href=&quot;http://gist.github.com/104176&quot;&gt;Gist&lt;/a&gt; and &lt;a href=&quot;http://pastie.org/&quot;&gt;Pastie&lt;/a&gt; felt like overkill (although I do like those services, especially &lt;a href=&quot;http://pastie.org/&quot;&gt;Pastie&lt;/a&gt;). From my github &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; feed there seemed to be a lot of activity on &lt;a href=&quot;http://github.com/mojombo/jekyll/tree/master&quot;&gt;Jekyll&lt;/a&gt; so I was browsing the &lt;span class=&quot;caps&quot;&gt;README&lt;/span&gt; and chanced upon the fact that it supports &lt;a href=&quot;http://pygments.org/&quot;&gt;Pygment&lt;/a&gt; which was just what I needed. One quick python &lt;a href=&quot;http://peak.telecommunity.com/DevCenter/EasyInstall&quot;&gt;easy_install&lt;/a&gt; and I was up and running. Sweet!&lt;/p&gt;
&lt;p&gt;So, I spent some time this evening looking at methods &amp;amp; params in Ruby (actually: &lt;a href=&quot;http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Method_Calls&quot;&gt;here&lt;/a&gt;). Heres the short and sweet:&lt;/p&gt;
&lt;h3&gt;Hashes&lt;/h3&gt;
&lt;p&gt;Passing a Hash to a method will result in those parameters being rolled up into a single Hash Variable.&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
&amp;gt;&amp;gt; def accept(var)
&amp;gt;&amp;gt; var.inspect
&amp;gt;&amp;gt; end
=&amp;gt; nil
&amp;gt;&amp;gt; accept('a')
=&amp;gt; &quot;\&quot;a\&quot;&quot;
&amp;gt;&amp;gt; accept('a' =&amp;gt; 1)
=&amp;gt; &quot;{\&quot;a\&quot;=&amp;gt;1}&quot;
&amp;gt;&amp;gt; accept('a'=&amp;gt;1,'b'=&amp;gt;2)
=&amp;gt; &quot;{\&quot;a\&quot;=&amp;gt;1, \&quot;b\&quot;=&amp;gt;2}&quot;
&lt;/pre&gt;
&lt;h3&gt;Asterisk&lt;/h3&gt;
&lt;p&gt;An asterisk (the &amp;#8216;splat&amp;#8217; operator) can be used on last parameter of a method to pass additional params. Additional params are collected into an array in the last parameter.&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
&amp;gt;&amp;gt; def accept2(a, b, *c)
&amp;gt;&amp;gt; c.inspect
&amp;gt;&amp;gt; end
=&amp;gt; nil
&amp;gt;&amp;gt; accept2(1, 2, 3, 4, 5)
=&amp;gt; &quot;[3, 4, 5]&quot;
&lt;/pre&gt;
&lt;p&gt;And the reverse is true, an array parameter can be prefixed by asterisk to be expanded as its passed to the method.&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
&amp;gt;&amp;gt; a = [1, 2, 3]
=&amp;gt; [1, 2, 3]
&amp;gt;&amp;gt; accept2(*a)
=&amp;gt; &quot;[3]&quot;
&lt;/pre&gt;
&lt;h3&gt;Ampersand&lt;/h3&gt;
&lt;p&gt;Much like asterisk, except you are telling the method that a code block will be passed in. A proc object will be created and assigned to the param name.&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
&amp;gt;&amp;gt; def accept3(&amp;amp;code)
&amp;gt;&amp;gt; code.call
&amp;gt;&amp;gt; end
=&amp;gt; nil
&amp;gt;&amp;gt; accept3 {puts &quot;philly&quot;}
philly
=&amp;gt; nil
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Too Many Open Files in Rails - Temp Files in Mongrel</title>
   <link href="/2009/03/16/temp-files-in-mongrel.html"/>
   <updated>2009-03-16T00:00:00-06:00</updated>
   <id>/2009/03/16/temp-files-in-mongrel</id>
   <content type="html">&lt;h2&gt;&lt;a href=&quot;/2009/03/16/temp-files-in-mongrel.html&quot;&gt;Too Many Open Files in Rails &amp;#8211; Temp Files in Mongrel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;16 Mar 2009 &amp;#8211; Denver, CO&lt;/p&gt;
&lt;div id=&quot;post-1&quot; class=&quot;post&quot;&gt;
&lt;div class=&quot;entry&quot;&gt;
&lt;p&gt;I&amp;#8217;ve had a whole bunch of pain the last couple of days with &lt;a href=&quot;http://mongrel.rubyforge.org/&quot;&gt;mongrel&lt;/a&gt; dumping tmp files on me and filling up my ulimit quota causing Rails to fall over.&lt;/p&gt;
&lt;p&gt;It started when I started posting a bunch of multi-part files to Rails and letting &lt;a href=&quot;http://github.com/technoweenie/attachment_fu/tree/master&quot;&gt;attachment_fu&lt;/a&gt; do the dirty-work, but I quickly hit upon this:&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
Processing DocumentsController#create to xml ...
...

MissingSourceFile (no such file to load -- .../git/eiger/app/models/document.rb):
	.../lib/active_support/dependencies.rb:382:in `load_without_new_constant_marking'
	.../lib/active_support/dependencies.rb:382:in `load_file'
	.../lib/active_support/dependencies.rb:521:in `new_constants_in'
&lt;/pre&gt;
&lt;p&gt;A quick check meant:&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
:eiger philipmcmahon$ ulimit -n
256
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
:~ philipmcmahon$ lsof /dev/disk0s2 | grep mongrel |  wc -l
245

philip-mcmahons-macbook-pro:~ philipmcmahon$ lsof /dev/disk0s2 | grep mongrel
ruby      25400 philipmcmahon    6u   REG   14,2    712224 13096890 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
ruby      25400 philipmcmahon    7u   REG   14,2    348977 13102715 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
ruby      25400 philipmcmahon    8u   REG   14,2    626096 13096931 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
ruby      25400 philipmcmahon    9u   REG   14,2   1350716 13097079 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
ruby      25400 philipmcmahon   10u   REG   14,2    203294 13096875 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
ruby      25400 philipmcmahon   11u   REG   14,2   2699790 13097300 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
ruby      25400 philipmcmahon   12u   REG   14,2    178210 13096959 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
ruby      25400 philipmcmahon   13u   REG   14,2    217603 13097577 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
ruby      25400 philipmcmahon   14u   REG   14,2   1348152 13097069 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
ruby      25400 philipmcmahon   15u   REG   14,2    203292 13096968 
/private/var/folders/+Z/+ZLlmYL1FlmQ5osVVIedbU+++TI/-Tmp-/mongrel25400-0
&lt;/pre&gt;
&lt;p&gt;Holy shit!&lt;/p&gt;
&lt;p&gt;I have no idea what those file-pointers are, but I do know that they are caused by the file part of multi-part form upload data. For a while I thought it was related to creating Tempfile classes, but after it while it became clear that it was mongrel doing whatever.&lt;/p&gt;
&lt;p&gt;To cut a long story short, I switched to &lt;a href=&quot;http://www.webrick.org/&quot;&gt;webrick&lt;/a&gt; and the problem went away.&lt;/p&gt;
&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Singleton classes or Eigenclasses</title>
   <link href="/2009/01/28/singletons_classes_or_eigenclasses.html"/>
   <updated>2009-01-28T00:00:00-07:00</updated>
   <id>/2009/01/28/singletons_classes_or_eigenclasses</id>
   <content type="html">&lt;h2&gt;&lt;a href=&quot;/2009/01/28/singletons_classes_or_eigenclasses.html&quot;&gt;Singleton classes or Eigenclasses&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;28 Jan 2009 &amp;#8211; Las Vegas, NV&lt;/p&gt;
&lt;div id=&quot;post-1&quot; class=&quot;post&quot;&gt;
&lt;div class=&quot;entry&quot;&gt;
&lt;p&gt;Vegas for the week at a conference. In the Java world, &amp;#8216;Singleton&amp;#8217; (at least to me) usually referred to the design pattern which allowed you to ensure that there would always only be a maximum of one object instance of a particular class. It was usually implemented by making the constructor private and providing an access method that returned a single (usually static) instance of an singular object. It might looked something like this:&lt;/p&gt;
&lt;pre class='brush:java,gutter:false'&gt; 

public class SingletonExample {

	/**
	 * Private class variable
	 */
	private static SingletonExample singleton;
	
	/**
	 * This is the only method available to access the class variable.
	 * @return the singleton instance
	 */
	public static SingletonExample onlyInstance() {
		if (singleton == null)
			singleton = new SingletonExample();
		return singleton;
	}
	
	/**
	 * The Ctr should be private
	 */
	private SingletonExample() {
	}
}

&lt;/pre&gt;
&lt;p&gt;Things appear to be slightly different in the Ruby world. A &lt;i&gt;singleton&lt;/i&gt; or &lt;i&gt;eigenclass&lt;/i&gt; in the Ruby world refers to a particular instance of an object, and ruby allows us to override the methods and behaviors of a particular object (note &amp;#8211; not class).&lt;/p&gt;
&lt;pre class='brush:ruby,gutter:false'&gt; 
	?&amp;gt; class A
	&amp;gt;&amp;gt; end
	=&amp;gt; nil
	&amp;gt;&amp;gt; 
	?&amp;gt; a = A.new
	=&amp;gt; #&amp;lt;A:0x5ef664&amp;gt;
	&amp;gt;&amp;gt; b = A.new
	=&amp;gt; #&amp;lt;A:0x5ee1d8&amp;gt;
	&amp;gt;&amp;gt; 
	?&amp;gt; class &amp;lt;&amp;lt; a
	&amp;gt;&amp;gt; def to_s; &quot;Instance method&quot;; end
	&amp;gt;&amp;gt; end
	=&amp;gt; nil
	&amp;gt;&amp;gt; 
	?&amp;gt; a
	=&amp;gt; Instance method
	&amp;gt;&amp;gt; b
	=&amp;gt; #&amp;lt;A:0x5ee1d8&amp;gt;
&lt;/pre&gt;
&lt;p&gt;For more checkout: &lt;a href=&quot;http://whytheluckystiff.net/articles/seeingMetaclassesClearly.html&quot;&gt;whytheluckystiff&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Multiple Inheritance in Ruby</title>
   <link href="/2009/01/25/multiple-inheritance-in-ruby.html"/>
   <updated>2009-01-25T00:00:00-07:00</updated>
   <id>/2009/01/25/multiple-inheritance-in-ruby</id>
   <content type="html">&lt;h2&gt;&lt;a href=&quot;/2009/01/25/multiple-inheritance-in-ruby.html&quot;&gt;Multiple Inheritance in Ruby&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;16 Jan 2009 &amp;#8211; Miami, FL&lt;/p&gt;
&lt;div id=&quot;post-1&quot; class=&quot;post&quot;&gt;
&lt;div class=&quot;entry&quot;&gt;
&lt;p&gt;I&amp;#8217;m in Miami for a couple of days on business and spent the plane journey reading up on Ruby &lt;i&gt;Mixins&lt;/i&gt; and how it gets around the multiple inheritance problem.&lt;/p&gt;
&lt;p&gt;Coming from a Java background, where there was no multiple inheritance (&lt;i&gt;technically&lt;/i&gt; there isn&amp;#8217;t any in Ruby either), the solution to this one was pretty interesting to me. Ruby uses the concept of a &lt;i&gt;Mixin&lt;/i&gt; which is really just a module. A module can&amp;#8217;t be instantiated and is just a set of functionality.&lt;/p&gt;
&lt;pre class='brush:java,gutter:false'&gt; 
	?&amp;gt; module Mixin
	&amp;gt;&amp;gt; def mixin_method
	&amp;gt;&amp;gt; &quot;Mixin method&quot;
	&amp;gt;&amp;gt; end
	&amp;gt;&amp;gt; end
	=&amp;gt; nil
	&amp;gt;&amp;gt; 
	?&amp;gt; class A
	&amp;gt;&amp;gt; include Mixin
	&amp;gt;&amp;gt; end
	=&amp;gt; A
	&amp;gt;&amp;gt; 
	?&amp;gt; a = A.new
	&amp;gt;&amp;gt; a.mixin_method
	=&amp;gt; &quot;Mixin method&quot;
&lt;/pre&gt;
&lt;p&gt;Where it gets interesting (and the reason Java never supported multiple inheritance) is what to do if we have conflicting methods in our superclasses (&lt;i&gt;&amp;#8220;Diamond Problem&amp;#8221;&lt;/i&gt; anyone ?). Technically, Ruby does not support multiple inheritance, but you can mixin multiple modules into other classes or modules. How does Ruby deal with the diamond problem ? Well it basically uses the last method to be included. You can see below, that the returned method is based on the last one to be introduced to the lookup chain.&lt;/p&gt;
&lt;pre class='brush:java,gutter:false'&gt; 
	?&amp;gt; module MixinA
	&amp;gt;&amp;gt; def hello
	&amp;gt;&amp;gt; &quot;hello from A&quot;
	&amp;gt;&amp;gt; end
	&amp;gt;&amp;gt; end
	=&amp;gt; nil
	&amp;gt;&amp;gt; 
	?&amp;gt; module MixinB
	&amp;gt;&amp;gt; def hello
	&amp;gt;&amp;gt; &quot;hello from B&quot;
	&amp;gt;&amp;gt; end
	&amp;gt;&amp;gt; end
	=&amp;gt; nil
	&amp;gt;&amp;gt; 
	?&amp;gt; class C
	&amp;gt;&amp;gt; include MixinA
	&amp;gt;&amp;gt; include MixinB
	&amp;gt;&amp;gt; end
	=&amp;gt; C
	&amp;gt;&amp;gt; 
	?&amp;gt; c = C.new
	=&amp;gt; #&amp;lt;C:0x5e6550&amp;gt;
	&amp;gt;&amp;gt; c.hello
	=&amp;gt; &quot;hello from B&quot;
	&amp;gt;&amp;gt; 
	?&amp;gt; class D
	&amp;gt;&amp;gt; include MixinB
	&amp;gt;&amp;gt; include MixinA
	&amp;gt;&amp;gt; end
	=&amp;gt; D
	&amp;gt;&amp;gt; 
	?&amp;gt; d = D.new
	=&amp;gt; #&amp;lt;D:0x5e0ca4&amp;gt;
	&amp;gt;&amp;gt; d.hello
	=&amp;gt; &quot;hello from A&quot;
&lt;/pre&gt;
&lt;p&gt;And thats it. You can also include a module in another module, just like normal inheritance. Module is actually a super-class of Class, but classes cannot be mixed-in to other classes, only Modules can.&lt;/p&gt;
&lt;pre class='brush:java,gutter:false'&gt; 
	&amp;gt;&amp;gt; module MixinA
	&amp;gt;&amp;gt; def hello
	&amp;gt;&amp;gt; &quot;hello&quot;
	&amp;gt;&amp;gt; end
	&amp;gt;&amp;gt; end
	=&amp;gt; nil
	&amp;gt;&amp;gt; 
	?&amp;gt; module MixinB
	&amp;gt;&amp;gt; include MixinA
	&amp;gt;&amp;gt; def hello2
	&amp;gt;&amp;gt; &quot;hello2&quot;
	&amp;gt;&amp;gt; end
	&amp;gt;&amp;gt; end
	=&amp;gt; nil
	&amp;gt;&amp;gt; 
	?&amp;gt; class C
	&amp;gt;&amp;gt; include MixinB
	&amp;gt;&amp;gt; end
	=&amp;gt; C
	&amp;gt;&amp;gt; 
	?&amp;gt; c = C.new
	=&amp;gt; #&amp;lt;C:0x5e7608&amp;gt;
	&amp;gt;&amp;gt; c.hello
	=&amp;gt; &quot;hello&quot;
	&amp;gt;&amp;gt; c.hello2
	=&amp;gt; &quot;hello2&quot;
&lt;/pre&gt;
&lt;p&gt;For a more complete introduction, of course you can simply &lt;i&gt;`ri Module`&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Did the pastie break my repo display ?</title>
   <link href="/2009/01/16/did-the-pastie-break-my-repo-display.html"/>
   <updated>2009-01-16T00:00:00-07:00</updated>
   <id>/2009/01/16/did-the-pastie-break-my-repo-display</id>
   <content type="html">&lt;h2&gt;&lt;a href=&quot;/2009/01/16/did-the-pastie-break-my-repo-display.html&quot;&gt;Did the pastie break my repo display ?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;16 Jan 2009 &amp;#8211; Denver, CO&lt;/p&gt;
&lt;div id=&quot;post-1&quot; class=&quot;post&quot;&gt;
&lt;div class=&quot;entry&quot;&gt;
&lt;p&gt;For some weird reason the repo display wasn&amp;#8217;t showing in the &lt;a href=&quot;http://snaggled.github.com/2008/12/29/using-the-github-api-to-display-your-repos.html&quot;&gt;last post&lt;/a&gt;. The only thing different about it was the pastie, e.g.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;script src='http://pastie.org/349089.js'&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;If I make this the last line of text before its piped thru &lt;a href=&quot;http://github.com/mojombo/jekyll&quot;&gt;jekyll&lt;/a&gt;, the repo-display Javascript fails. Wierdness.&lt;/p&gt;
&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Using the GitHub API to Display your Repositories</title>
   <link href="/2008/12/29/using-the-github-api-to-display-your-repos.html"/>
   <updated>2008-12-29T00:00:00-07:00</updated>
   <id>/2008/12/29/using-the-github-api-to-display-your-repos</id>
   <content type="html">&lt;h1&gt;Using the GitHub &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to Display your Repositories&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;29 Dec 2008 &amp;#8211; Draperstown, Northern Ireland&lt;/p&gt;
&lt;p&gt;I wanted to display a list of my repositories on my homepage. Spent a while fluffing about with the &lt;a href=&quot;http://docs.jquery.com/Ajax/jQuery.getJSON&quot;&gt;jQuery.getJSON&lt;/a&gt; call, but in the end found it preferable to use the callback parameter combined with &lt;a href=&quot;http://docs.jquery.com/Ajax/jQuery.getScript&quot;&gt;jQuery.getScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Heres the code, which will populate a div with the id &amp;#8216;repos&amp;#8217;:&lt;/p&gt;
&lt;script src='http://pastie.org/349089.js'&gt;&lt;/script&gt;</content>
 </entry>
 
 <entry>
   <title>We are up and running</title>
   <link href="/2008/12/29/We+are+up+and+running.html"/>
   <updated>2008-12-29T00:00:00-07:00</updated>
   <id>/2008/12/29/We are up and running</id>
   <content type="html">&lt;h1&gt;We are up and running&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;29 Dec 2008 &amp;#8211; Draperstown, Northern Ireland&lt;/p&gt;
&lt;p&gt;Bringing the blog up was pretty painless, and full kudos must go to &lt;a href=&quot;http://mojombo.github.com&quot;&gt;mojombo&lt;/a&gt; for both the sweet &lt;a href=&quot;http://github.com/mojombo/jekyll&quot;&gt;jekyll&lt;/a&gt; idea and tool, and even css style (yes, I was that lazy). I love the ability to blog via a git commit, very cool and minimal overhead. The &lt;a href=&quot;http://hobix.com/textile/&quot;&gt;Textile&lt;/a&gt; format is pretty new to me (I know &amp;#8211; where have I been ?) but I&amp;#8217;m really enjoying it.&lt;/p&gt;
&lt;p&gt;With regard to the whole &lt;a href=&quot;http://git.or.cz/&quot;&gt;git&lt;/a&gt; vs &lt;a href=&quot;http://subversion.tigris.org/&quot;&gt;svn&lt;/a&gt; thing, I didn&amp;#8217;t really have any problems with svn, although the merging process could be a little annoying. I&amp;#8217;ve been using &lt;a href=&quot;http://svnrepository.com/&quot;&gt;these guys&lt;/a&gt; for a while without complaint, so I&amp;#8217;d recommend them if you are taking the svn path. If the git and &lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt; thing works out I may end end moving away from those guys. So far I like the distributed repo aspect of git &amp;#8211; the fact I can commit to a local repo and its almost instant, and then push to a remote when I am ready, is great.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been planning some big changes to &lt;a href=&quot;http://geosack.com&quot;&gt;geosack.com&lt;/a&gt; (very interested in location based services at the minute), so it may be the first victim to be migrated to &lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt;. Last remaining item on the list is to find &amp;amp; install a git bundle for &lt;a href=&quot;http://macromates.com/&quot;&gt;Textmate&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Switching to Git (and GitHub)</title>
   <link href="/2008/12/28/switching-to-git.html"/>
   <updated>2008-12-28T00:00:00-07:00</updated>
   <id>/2008/12/28/switching-to-git</id>
   <content type="html">&lt;h1&gt;Switching to Git (and GitHub)&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;28 Dec 2008 &amp;#8211; Moy, Northern Ireland&lt;/p&gt;
&lt;p&gt;Decided to finally make the move from &lt;a href=&quot;http://subversion.tigris.org/&quot;&gt;svn&lt;/a&gt; to &lt;a href=&quot;http://git.or.cz/&quot;&gt;git&lt;/a&gt; for all my projects, and in the process am considering a move to &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt;, so we&amp;#8217;ll see how this goes. Mikey Finn is sitting here playing &lt;span class=&quot;caps&quot;&gt;COD&lt;/span&gt; World at War, so I&amp;#8217;m doing this to a soundtrack of explosions and death.&lt;/p&gt;
&lt;p&gt;Will probably spend a couple hours playing with &lt;a href=&quot;http://github.com/mojombo/jekyll/tree/master&quot;&gt;Jekyll&lt;/a&gt; and if things look good, will start the migration of &lt;a href=&quot;http://geosack.com&quot;&gt;Geosack&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 
</feed>